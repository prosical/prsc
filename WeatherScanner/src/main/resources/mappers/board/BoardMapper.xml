<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<mapper namespace="BoardMapper">


	<!-- DB컬럼과 VO필드명이 다른 경우 처리 방법 -->
	<resultMap id="BoardResultMap"
		type="com.spring.weather.board.model.BoardVO">
		<id property="boardNo" column="board_no" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="memberId" column="member_id" />
		<result property="regDate" column="reg_date" />
		<result property="viewCnt" column="view_cnt" />
		<result property="replyCnt" column="reply_cnt" />
		<result property="addFile" column="add_file" />
		<result property="likeCnt" column="like_cnt" />
	</resultMap>


	<!-- 게시물 등록 -->
	<insert id="insert">
		INSERT INTO review_board (title, content, member_id)
		VALUES (#{title}, #{content}, #{memberId})
	</insert>

	<!-- 단일 게시물 조회 -->
	<select id="getArticle" resultMap="BoardResultMap">
		SELECT * FROM review_board
		WHERE board_no = #{boardNo}
	</select>

	<!-- 게시물 수정 -->
	<update id="update">
		UPDATE review_board
		SET title = #{title}, content =
		#{content}
		WHERE board_no = #{boardNo}
	</update>

	<!-- 게시물 삭제 -->
	<delete id="delete">
		DELETE FROM review_board
		WHERE board_no = #{boardNo}
	</delete>

	<!-- 모든 게시물 조회 -->
	<!-- xml에서 SQL구문 작성시 연산자기호와 문자열을 구분할 수 없을 경우 <![CDATA]]> 구문 안에 SQL을 작성하면 
		연산자 기호를 문자열로 처리할 수 있습니다. -->
	<select id="getAllArticles" resultMap="BoardResultMap">
    	<![CDATA[
    	SELECT * FROM review_board 
    	WHERE board_no > 0 
    	ORDER BY board_no DESC
    	]]>
	</select>

	<!-- 페이지별 게시물 조회 -->
	<select id="listPaging" resultMap="BoardResultMap">

		SELECT *
		FROM review_board
		ORDER BY board_no DESC
		LIMIT #{pageStart}, #{countPerPage}

	</select>

	<select id="countArticles" resultType="int">

		SELECT
		COUNT(board_no)
		FROM
		review_board

	</select>

	<!-- 검색된 게시물 수 조회 처리 -->
	<select id="countSearchArticles" resultType="int">
		SELECT COUNT(*) FROM review_board
		<include refid="search" />
	</select>

	<!-- 검색된 게시물 목록 조회 처리 -->
	<select id="listSearch" resultMap="BoardResultMap">
		SELECT * FROM review_board
		<include refid="search" />
		ORDER BY board_no DESC
		LIMIT #{pageStart}, #{countPerPage}
	</select>


	<!-- 중복되는 동적 SQL구문 처리 -->
	<sql id="search">
		<if test="condition != ''">
			<!-- 동적 SQL 구문 -->
			<if test="condition == 'title'">
				WHERE title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="condition == 'member_id'">
				WHERE member_id LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="condition == 'content'">
				WHERE content LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="condition == 'titleContent'">
				WHERE title LIKE CONCAT('%', #{keyword}, '%')
				OR content
				LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</if>

	</sql>

	<!-- 조회수 상승 SQL -->
	<update id="updateViewCnt">
		UPDATE review_board
		SET view_cnt = view_cnt + 1
		WHERE
		board_no = #{boardNo}
	</update>
	<!-- 조회수 하강 SQL -->
	<update id="deleteViewCnt">
		UPDATE review_board
		SET view_cnt = view_cnt - 1
		WHERE
		board_no = #{boardNo}
	</update>
	
	<!-- 리플수 상승 SQL -->
	<update id="updateReplyCnt">
		UPDATE review_board
		SET reply_cnt = reply_cnt + #{count}
		WHERE
		board_no = #{boardNo}
	</update>

	<select id="countLike" resultType="int">
		SELECT

    Lk.like_cnt as like_cnt
from likeit Lk
left outer join review_board B
on Lk.board_no = B.board_no 
where B.board_no = #{boardNo}

	</select>

	<delete id="deleteAll">
		DELETE FROM review_board WHERE member_id =
		#{memberId}
	</delete>

	<!-- mypage -->
	<!-- 내가 쓴 글 모아보기 -->

	<select id="getMyArticle" resultMap="BoardResultMap"> SELECT * FROM review_board
		WHERE member_id = #{memberId}
	</select>

	<select id="countMyArticle" resultType="int"> SELECT COUNT(*) FROM
		review_board WHERE member_id = #{memberId}
	</select>

	<!-- 내가 찜한 글 모아보기 -->

	<select id="getLiArticle" resultMap="BoardResultMap"> SELECT
		lk.board_no as board_no,
		rb.title as title, rb.nickname as nickname, rb.reg_date
		as reg_date, rb.view_cnt as view_cnt
		FROM likeit lk
		left join review_board rb
		on lk.board_no = rb.board_no
		WHERE lk.member_id = #{member_id};
	</select>

	<select id="countLiArticle" resultType="int"> 
		SELECT 
	    COUNT(like_cnt) as likeCnt
		from likeit Lk
		left outer join review_board B
		on Lk.board_no = B.board_no 
		where B.board_no = #{boardNo} 
		order by like_no desc;
	</select>


	<select id="memberWriteAllArticles" resultMap="BoardResultMap">
		SELECT * FROM review_board WHERE member_id=#{memberId}
	</select>
</mapper>